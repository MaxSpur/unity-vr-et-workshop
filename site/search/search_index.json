{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Unity VR and Eye Tracking Workshop! Hello and thank you for participating in this workshop! Here you'll learn about the basics of the Unity game engine : How to create and run a first 3D environment How to interact with 3D objects and how to animate them, and How to script them with more complex behaviors. More specifically for a use-case in psychological/perceptual research, it will also teach you about: Setting up a VR environment with eye tracking (specifically the HTC Vive Pro Eye), Recording and outputting eye tracking data from players or participants, and How to interpret these results. In order to condense the workshop and save time, we have already prepared the computers you'll be working on with all necessary software and editing environments. If you want to repeat the process on your own equipment or in your lab, the page on Installation and Setup will lead you to our recommended setup, but for now you can directly start with the first part , which will teach you about creating your first unity project with a simple 3D object. You can navigate the page with the buttons below, or using the links in the directory on the left (or behind the menu icon). Feel free to ask you tutors about any issues you might be having at any point, they are here to help you. We hope you'll enjoy the journey!","title":"Welcome"},{"location":"#welcome-to-the-unity-vr-and-eye-tracking-workshop","text":"Hello and thank you for participating in this workshop! Here you'll learn about the basics of the Unity game engine : How to create and run a first 3D environment How to interact with 3D objects and how to animate them, and How to script them with more complex behaviors. More specifically for a use-case in psychological/perceptual research, it will also teach you about: Setting up a VR environment with eye tracking (specifically the HTC Vive Pro Eye), Recording and outputting eye tracking data from players or participants, and How to interpret these results. In order to condense the workshop and save time, we have already prepared the computers you'll be working on with all necessary software and editing environments. If you want to repeat the process on your own equipment or in your lab, the page on Installation and Setup will lead you to our recommended setup, but for now you can directly start with the first part , which will teach you about creating your first unity project with a simple 3D object. You can navigate the page with the buttons below, or using the links in the directory on the left (or behind the menu icon). Feel free to ask you tutors about any issues you might be having at any point, they are here to help you. We hope you'll enjoy the journey!","title":"Welcome to the Unity VR and Eye Tracking Workshop!"},{"location":"page-0/","text":"Installation and Setup Installing Unity","title":"Installation and Setup"},{"location":"page-0/#installation-and-setup","text":"","title":"Installation and Setup"},{"location":"page-0/#installing-unity","text":"","title":"Installing Unity"},{"location":"page-1/","text":"First Unity Project \u2014 getting to know the Editors Create a first project using the Unity Hub If not already running on your computer, start the Unity Hub (see the icon above). Depending on previous use there may be already projects listed in its window \u2014 if so, disregard them for now and just click the New project button. You will be presented with a dialog to configure the project. Usually it's already all set up correctly, but to make sure just verify the following points: Editor Version should be the latest one from the list (2021.3.11f1 in our case), The 3D template should be selected, Don't forget to give your first project a name and choose a location (the default works here). Pushing the Create project button will open the Unity Editor and tell it create a new project with the above parameters. This may take some time\u2026 Setting up the Editor Once this process is complete, you will see a the Unity Editor in its default configuration, showing a blank scene. You can leave this as is, or drag the tab handles and section dividers around to create a more comfortable working environment. One particularly important change would be to permanently reveal the Console window by dragging the Project window it's being obscured by to a new location. Below is our suggested arrangement with new placements of the Hierarchy, Project, and Console windows. The biggest part should show you the Scene View, where you can freely navigate using common 3D software controls, like zooming in and out with the mouse wheel, rotating by holding the right mouse button, and translating your position by holding the middle mouse button. See the official Unity manual on more information on this. Scene, Hierarchy, and Camera Views + Inspector The Scene View shows you the contents of your currently open Scene \u2014 a kind of super Object that holds all other objects. A full overview of all objects and their relationships is shown in the Hierarchy window \u2014 as you can see, it currently only contains our only Scene ( SampleScene ), which holds a simple Directional Light for illuminating the world and the Main Camera that lets a player see it. Let's select that camera by clicking on it in the Hierarchy or on its Gizmo (camera icon) in the Scene view: It is now highlighted in both Scene and Hierarchy views, as shown by a highlight and the appearance of arrows pointing in the cardinal directions around the object. In addition, a view from this camera now shows up in the Scene view as a floating window: this is what a player of this game will see if we run it. The same view is visible in a full window by selecting the Game tab in the Scene window. Another thing that happens when we select a Game Object like this camera in the editor is the appearance of this object's Inspector in its previously empty window to the top right. This window allows us to view and change every single aspect of any Game Object, which may differ by their type. One Component all possible objects, be they cameras, lights, or dinosaur models share is their Transform: a grid that contains the coordinates of their position, rotation vector, and its scale. Transforms and Hierarchies In the case of the camera and light and any other objects directly under the SampleScene Scene object, these coordinates are equivalent to their \"world\" coordinates. For any object that sits below another in the Hierarchy, these coordinates are basically offset by those of their Parent. See Unity's documentation on the Hierarchy and Transforms for more details. Let's set the camera's Position to the origin and rotate it to point in the blue arrow's (the Z-axis) direction by editing its Transform Component accordingly: set Position X=0, Y=0, Z=0 and Rotation X=0, Y=90, Z=0 . Creating a first object Let's bring a cube into the scene. While you can go to the main menu under GameObject and select what you want to create, a more precise way is to right-click on an empty part of the Hierarchy and selecting 3D Object \u2192 Cube . This will create a basic cube GameObject inside our Scene, with a default Transform. If we had right-clicked on any existing object in the scene instead of on an empty space, we would have created a child object that would be tied to its parent, and this is not what we want in this case. If you double-click on the new Cube object in the hierarchy, the scene view will fully zoom into it, showing that it basically swallowed our camera. If you select our camera object again, its view (or the Game View) won't show the cube \u2014 the way most 3D engines work, objects are transparent from the inside. Let's move the box to a position where the camera can see it, and also try making it smaller by setting its transform component to Position X=2, Y=0, Z=0 and Scale X=0.2, Y=0.2, Z=0.2 . Selecting our camera again, we can now see a small box appearing at the center of its view. If the cube is now gone from our scene view, just zoom out a bit, or double-click it again in the hierarchy. You can keep playing around with the cube's Transform component to move it around and scale it, or also use the handles in the scene view: dragging one of the three arrows or the squares between them will also change the transform accordingly. More on Positioning There are many more ways to change the transform with the mouse. You can switch transform modes by pressing W , E , R , or by selecting the different icons in the little floating window in the scene view to move, rotate, scale an object, respectively. See the Unity Documentation for more details on this. Animating an object All we did so far is not much different than using any basic 3D creation software. Where a game engine like Unity differs, is its ability of freely scripting the objects we place in scenes, using programming languages. Rotating.cs using UnityEngine ; public class Rotating : MonoBehaviour { [Tooltip(\"Units per second\")] public float speed ; // Set to 180 in editor [Tooltip(\"Axis to rotate around\")] public Vector3 axis ; // Set to (1,0,0) in editor // Update is called once per frame void Update () { transform . Rotate ( axis , speed * Time . deltaTime ); } }","title":"First Unity Project"},{"location":"page-1/#first-unity-project-getting-to-know-the-editors","text":"","title":"First Unity Project \u2014 getting to know the Editors"},{"location":"page-1/#create-a-first-project-using-the-unity-hub","text":"If not already running on your computer, start the Unity Hub (see the icon above). Depending on previous use there may be already projects listed in its window \u2014 if so, disregard them for now and just click the New project button. You will be presented with a dialog to configure the project. Usually it's already all set up correctly, but to make sure just verify the following points: Editor Version should be the latest one from the list (2021.3.11f1 in our case), The 3D template should be selected, Don't forget to give your first project a name and choose a location (the default works here). Pushing the Create project button will open the Unity Editor and tell it create a new project with the above parameters. This may take some time\u2026","title":"Create a first project using the Unity Hub"},{"location":"page-1/#setting-up-the-editor","text":"Once this process is complete, you will see a the Unity Editor in its default configuration, showing a blank scene. You can leave this as is, or drag the tab handles and section dividers around to create a more comfortable working environment. One particularly important change would be to permanently reveal the Console window by dragging the Project window it's being obscured by to a new location. Below is our suggested arrangement with new placements of the Hierarchy, Project, and Console windows. The biggest part should show you the Scene View, where you can freely navigate using common 3D software controls, like zooming in and out with the mouse wheel, rotating by holding the right mouse button, and translating your position by holding the middle mouse button. See the official Unity manual on more information on this.","title":"Setting up the Editor"},{"location":"page-1/#scene-hierarchy-and-camera-views-inspector","text":"The Scene View shows you the contents of your currently open Scene \u2014 a kind of super Object that holds all other objects. A full overview of all objects and their relationships is shown in the Hierarchy window \u2014 as you can see, it currently only contains our only Scene ( SampleScene ), which holds a simple Directional Light for illuminating the world and the Main Camera that lets a player see it. Let's select that camera by clicking on it in the Hierarchy or on its Gizmo (camera icon) in the Scene view: It is now highlighted in both Scene and Hierarchy views, as shown by a highlight and the appearance of arrows pointing in the cardinal directions around the object. In addition, a view from this camera now shows up in the Scene view as a floating window: this is what a player of this game will see if we run it. The same view is visible in a full window by selecting the Game tab in the Scene window. Another thing that happens when we select a Game Object like this camera in the editor is the appearance of this object's Inspector in its previously empty window to the top right. This window allows us to view and change every single aspect of any Game Object, which may differ by their type. One Component all possible objects, be they cameras, lights, or dinosaur models share is their Transform: a grid that contains the coordinates of their position, rotation vector, and its scale. Transforms and Hierarchies In the case of the camera and light and any other objects directly under the SampleScene Scene object, these coordinates are equivalent to their \"world\" coordinates. For any object that sits below another in the Hierarchy, these coordinates are basically offset by those of their Parent. See Unity's documentation on the Hierarchy and Transforms for more details. Let's set the camera's Position to the origin and rotate it to point in the blue arrow's (the Z-axis) direction by editing its Transform Component accordingly: set Position X=0, Y=0, Z=0 and Rotation X=0, Y=90, Z=0 .","title":"Scene, Hierarchy, and Camera Views + Inspector"},{"location":"page-1/#creating-a-first-object","text":"Let's bring a cube into the scene. While you can go to the main menu under GameObject and select what you want to create, a more precise way is to right-click on an empty part of the Hierarchy and selecting 3D Object \u2192 Cube . This will create a basic cube GameObject inside our Scene, with a default Transform. If we had right-clicked on any existing object in the scene instead of on an empty space, we would have created a child object that would be tied to its parent, and this is not what we want in this case. If you double-click on the new Cube object in the hierarchy, the scene view will fully zoom into it, showing that it basically swallowed our camera. If you select our camera object again, its view (or the Game View) won't show the cube \u2014 the way most 3D engines work, objects are transparent from the inside. Let's move the box to a position where the camera can see it, and also try making it smaller by setting its transform component to Position X=2, Y=0, Z=0 and Scale X=0.2, Y=0.2, Z=0.2 . Selecting our camera again, we can now see a small box appearing at the center of its view. If the cube is now gone from our scene view, just zoom out a bit, or double-click it again in the hierarchy. You can keep playing around with the cube's Transform component to move it around and scale it, or also use the handles in the scene view: dragging one of the three arrows or the squares between them will also change the transform accordingly. More on Positioning There are many more ways to change the transform with the mouse. You can switch transform modes by pressing W , E , R , or by selecting the different icons in the little floating window in the scene view to move, rotate, scale an object, respectively. See the Unity Documentation for more details on this.","title":"Creating a first object"},{"location":"page-1/#animating-an-object","text":"All we did so far is not much different than using any basic 3D creation software. Where a game engine like Unity differs, is its ability of freely scripting the objects we place in scenes, using programming languages. Rotating.cs using UnityEngine ; public class Rotating : MonoBehaviour { [Tooltip(\"Units per second\")] public float speed ; // Set to 180 in editor [Tooltip(\"Axis to rotate around\")] public Vector3 axis ; // Set to (1,0,0) in editor // Update is called once per frame void Update () { transform . Rotate ( axis , speed * Time . deltaTime ); } }","title":"Animating an object"}]}